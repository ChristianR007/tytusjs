class PolynomialModel{constructor(){this.isFit=!1}}class PolynomialRegression extends PolynomialModel{constructor(){super(),this.solutions=[],this.error=0}fit(t,e,l){let o=l+1,r=l+2,s=new Array(o);for(let t=0;t<o;t++)s[t]=new Array(r);for(let l=0;l<o;l++)for(let o=0;o<r;o++){let i=0;if(0==l&&0==o)i=t.length;else if(o==r-1)for(let o=0;o<t.length;o++)i+=Math.pow(t[o],l)*e[o];else for(let e=0;e<t.length;e++)i+=Math.pow(t[e],o+l);s[l][o]=i}for(let t=1;t<o;t++)for(let e=0;e<=t-1;e++){let l=s[t][e]/s[e][e];for(let o=e;o<r;o++)s[t][o]=s[t][o]-l*s[e][o]}for(let t=o-1;t>-1;t--)for(let e=o-1;e>-1;e--)t==e?s[t][r-1]=s[t][r-1]/s[t][e]:0!=s[t][e]&&(s[t][r-1]-=s[t][e]*s[e][r-1]);this.solutions=new Array(o);for(let t=0;t<o;t++)this.solutions[t]=s[t][r-1];this.isFit=!0,this.calculateR2(t,e)}predict(t){let e=[];if(this.isFit)for(let l=0;l<t.length;l++){let o=0;for(let e=0;e<this.solutions.length;e++)o+=this.solutions[e]*Math.pow(t[l],e);e.push(o)}return e}calculateR2(t,e){let l=new Array(t.length),o=this.predict(t),r=0;for(let s=0;s<t.length;s++)r+=e[s],l[s]=Math.pow(e[s]-o[s],2);let s=0,i=0;for(let o=0;o<t.length;o++)s+=l[o],i+=Math.pow(e[o]-r/t.length,2);let h=(i-s)/i;this.error=h}getError(){return this.error}}